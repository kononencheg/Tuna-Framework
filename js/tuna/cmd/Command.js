/////////////////////////////////////////////////////////////////////////////////////////
//
//	TUNA FRAMEWORK
//
//	Файл Command.js
//
//	Реализация класса tuna.command.Command.
//
//	Author Kononenko Sergey <kononenheg@gmail.com>
//
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//	Область имен.
/////////////////////////////////////////////////////////////////////////////////////////

var pkg = tuna.namespace("tuna.command");

/////////////////////////////////////////////////////////////////////////////////////////
//
//	Класс tuna.command.Command
//
/////////////////////////////////////////////////////////////////////////////////////////

/**
 * Абстрактный класс команды.
 *
 * @public
 * @abstract
 * @constructor
 */
pkg.Command = function()
{
	/**
	 * Зарегистрирование имя команды
	 * 
	 * @type String
	 */
	this.name = null;
};

/**
 * Выполнение команды.
 *
 * Данный метод следует переопределять в наследниках. Метод должен содержать код
 * выполнения команды.
 *
 * Результатом выполнения должно быть логическое значение возможности отмены данной
 * команды.
 *
 * Если метод возвращает <code>true</code>, значит данная команда, после выполнения
 * добавляется в стек отмены выполения команд, и подразумевается то, что при вызове
 * отмены данной команды, результаты ее действия будут очищены.
 *
 * Иначе, если метод возвращает <code>false</code>, означает, что отмена действия данной
 * команды невозможна и данная команда не добавляется в стек отмены выполнения.
 *
 * В том случае, если данный метод вызывался в качестве возвращения действия команды после
 * её отмены, результатом выполнения является значение возможности повторно отменить
 * данную комманду.
 *
 * @param {Object} data Сопутствующие выполнению данные команды. В том случае, если
 * возможна отмена данной комманды, и для её отмены требуются данные выполнения, следует
 * сохранить данную пременную во внутреннем свойстве.
 * @return {Boolean} Флаг о добавлении в стек отмены выполнения.
 */
pkg.Command.prototype.execute = function(data)
{
	throw tuna.createError("AbstractOperationError", "Метод execute(data:Object):Boolean должен быть переопределен в наследниках");

	return false;
}

/**
 * Отмена выполнения команды.
 *
 * Данный метод следует переопределять в наследниках. Метод должен содержать код отмены
 * выполнения команды.
 *
 * Результатом выполнения должно быть логическое значение возможности возвращения дейтвия
 * команды.
 *
 * Если метод возвращает <code>true</code>, значит действие команды можно вернуть, и
 * команда не удаляется из стека отмены выполения.
 *
 * ...
 * 
 * @return {Boolean} Успех выполнения команды.
 */
pkg.Command.prototype.cancel = function()
{
	throw new Error("Вызов абстрактной операции.");

	return false;
}

/**
 * Клонирование команды.
 *
 * Клонирование следует проводить без копирования рабочих данных.
 *
 * @return {tuna.command.Command} Копия даной команды.
 */
pkg.Command.prototype.clone = function()
{
	throw new Error("Вызов абстрактной операции.");

	return null;
}

/////////////////////////////////////////////////////////////////////////////////////////
//	Сокращения
/////////////////////////////////////////////////////////////////////////////////////////

tuna.typedef(pkg.Command, "Command");
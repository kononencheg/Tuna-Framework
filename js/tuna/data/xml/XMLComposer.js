/////////////////////////////////////////////////////////////////////////////////////////
//	
//	TUNA FRAMEWORK
//	
//	Файл XMLComposer.js
//
//	Реализация класса tuna.data.xml.XMLComposer
//	
//	Author Kononenko Sergey <kononenheg@gmail.com>
//	
/////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////
//	Импорт зависимостей.
/////////////////////////////////////////////////////////////////////////////////////////

tuna.include("tuna.data.IDataComposer");
tuna.include("tuna.data.xml");

/////////////////////////////////////////////////////////////////////////////////////////
//	Область имен.
/////////////////////////////////////////////////////////////////////////////////////////

var pkg = tuna.namespace("tuna.data.xml");

/////////////////////////////////////////////////////////////////////////////////////////
//
//	Класс tuna.display.xml.XMLComposer
//
/////////////////////////////////////////////////////////////////////////////////////////

/**
 * Класс объединение массива XML докоуметов в один с общем корнем
 *
 * @implements tuna.data.IDataComposer
 * @constructor
 * @param {String} rootName Имя корневого узла.
 */
pkg.XMLComposer = function(rootName)
{
	tuna.checkNotNull(rootName, 'rootName');

	this.__rootName = rootName;
};

/////////////////////////////////////////////////////////////////////////////////////////
//	Реализация tuna.data.IDataComposer
/////////////////////////////////////////////////////////////////////////////////////////

tuna.implement(pkg.XMLComposer, tuna.data.IDataComposer);

/**
 * Функция компоновки нескольких XML документов в один с общим корнем.
 *
 * @param {Array.<Object>} data Набор данных для компоновки.
 * @return {Object} Скомпонованный объект данных.
 */
pkg.XMLComposer.prototype.compose = function(data)
{
	tuna.checkArray(data, 'data');

	var result = tuna.data.xml.createDocument(this.__rootName);
	//Если в массиве элементов единственный элемент - возвращеме его без компоновки
	var i = data.length - 1, child;
	while (i >= 0)
	{
		child = data[i].documentElement.firstChild;

		while (child)
		{
			result.documentElement.appendChild(child.cloneNode(true));
			child = child.nextSibling;
		}
		
		i--;
	}

	return result;
}


/////////////////////////////////////////////////////////////////////////////////////////
//	Сокращения
/////////////////////////////////////////////////////////////////////////////////////////

tuna.typedef(pkg.XMLComposer, "XMLComposer");